package pattern

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/
/*
	Использование:
	1) когда нужно использовать разные вариации какого-то алгоритма внутри одного объекта
	2) когда у вас есть множество похожих классов, отличающихся только некоторым поведением
	3) когда не нужно обнажать детали реализации алгоритмов для других классов
	4) когда различные вариации алгоритмов реализованы в виде развесистого условного оператора.
	каждая ветка такого оператора представляет собой вариацию алгоритма

	+:
	1) горячая замена алгоритмов на лету
	2) изолирует код и данные алгоритмов от остальных классов
	3) уход от наследования к делегированию
	4) реализует принцип открытости/закрытости

	-:
	1) усложняет программу за счет дополнительных классов
	2) клиент должен знать, в чем состоит разница между стратегиями, чтобы выбрать подходящую
*/
type Price struct {
	Discount func() float64
	Amount float64
	FinalPrice float64
}

func (p *Price) Sell() {
	p.FinalPrice = p.Amount * p.Discount()
}

func (p *Price) SetStrategy(discount func() float64) {
	p.Discount = discount
}

